name: CodeCollab CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: codecollab_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, dom, fileinfo, mysql, pdo_mysql
        coverage: xdebug
        
    - name: Copy .env
      working-directory: ./backend
      run: php -r "file_exists('.env') || copy('.env.example', '.env');"
      
    - name: Install Dependencies
      working-directory: ./backend
      run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
      
    - name: Generate key
      working-directory: ./backend
      run: php artisan key:generate
      
    - name: Directory Permissions
      working-directory: ./backend
      run: chmod -R 777 storage bootstrap/cache
      
    - name: Run Migrations
      working-directory: ./backend
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: codecollab_test
        DB_USERNAME: root
        DB_PASSWORD: password
      run: php artisan migrate
        
    - name: Execute tests via PHPUnit
      working-directory: ./backend
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: codecollab_test
        DB_USERNAME: root
        DB_PASSWORD: password
      run: php artisan test --coverage-clover=coverage.xml
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        fail_ci_if_error: false
      
  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'
        
    - name: Install Dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Run Linting
      working-directory: ./frontend
      run: npm run lint
      
    - name: Run Tests
      working-directory: ./frontend
      run: npm test -- --coverage
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/coverage-final.json
        fail_ci_if_error: false
      
  build-and-deploy:
    needs: [backend-tests, frontend-tests]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and Push Backend Docker Image
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/codecollab-backend:latest
    
    - name: Build and Push Frontend Docker Image
      uses: docker/build-push-action@v4
      with:
        context: ./frontend
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/codecollab-frontend:latest
    
    - name: Deploy to Production
      run: |
        echo "Deploying to production server..."
        # This would typically involve SSH'ing into your server and pulling the latest images
        # Or using a deployment service like Kubernetes, AWS ECS, etc.
